{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "beea3b4d-2952-44d9-a7ad-4413b09d8fa9",
   "metadata": {},
   "source": [
    "Question no.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f254485-e2a0-443d-8579-3c08646020a4",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "incomplete input (4265980185.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[1], line 3\u001b[0;36m\u001b[0m\n\u001b[0;31m    Print ( type ( S1 )\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"
     ]
    }
   ],
   "source": [
    "s1 = { 2,4,6,8,10 }\n",
    "Print ( S1) \n",
    "Print ( type ( S1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5126ac2-33c6-485e-b286-495ab85a15bf",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "closing parenthesis ')' does not match opening parenthesis '{' (2391820481.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[2], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    s2 = set ({ USA, CHINA, UK, RUSSIA, INDIA, FRANCE)\u001b[0m\n\u001b[0m                                                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m closing parenthesis ')' does not match opening parenthesis '{'\n"
     ]
    }
   ],
   "source": [
    "s2 = set ({ USA, CHINA, UK, RUSSIA, INDIA, FRANCE) \n",
    "           print (s2)\n",
    "           print (type(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08b9b269-f1e2-4997-9406-28ba9b826a68",
   "metadata": {},
   "source": [
    "Question no.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da6f532a-c6de-49f8-9830-d2adc8492921",
   "metadata": {},
   "outputs": [],
   "source": [
    "1st= [2,4,6,8]\n",
    "d1= [ item: item ** 2 for item in 1st] \n",
    "print (d1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "202f51c7-d7b7-4d64-8b79-848d35e1f866",
   "metadata": {},
   "outputs": [],
   "source": [
    "# to creat a dict of only odd elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c071723-e5f8-464e-9eae-19c670e64bb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr= [ 1,2,3,4,5,6,7,8]\n",
    "D2 { item: item** 2 for item in arr if item % 2 ! =0} "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13b9dd33-cb43-467f-878e-4bd785735c01",
   "metadata": {},
   "source": [
    "Question no.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13ad31b1-c570-4be3-bccc-fc67dd551910",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = tuple ( '1' '3' '5')\n",
    "an- int = int ( a= tuple (0)\n",
    "print ( an - int ) # 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2f746f8-98d3-4fdb-b8f8-6b84e8e4bb17",
   "metadata": {},
   "source": [
    "Question no.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a929e8d9-2062-443b-b2de-59b8d6cf0d46",
   "metadata": {},
   "outputs": [],
   "source": [
    "sort the both arrays A ( 1,2,3) \n",
    "B ( 4,5,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d6203b8-d742-43a7-9da5-e342f699883b",
   "metadata": {},
   "outputs": [],
   "source": [
    "A { 1,2,3} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bec90ba-8cec-48fe-becc-11f1a569d4eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = result + A [ 1 ] \n",
    "B [ n-1-1] \n",
    "= 0+6=0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e336b2b-7ac0-40bf-8663-219663c41b11",
   "metadata": {},
   "source": [
    "Question no.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "741589f4-8faa-4ed8-a5cd-f522f7548a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Number = int ( input ( \" Enter a number ) \n",
    "if Number % 3 == QP number%\n",
    "11 == 0\n",
    "print ( \" Number is divisible by both 3 & 11 ) \n",
    "Print ( '' Number is not divisible by 3 and 11 ) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72d83d81-692c-46be-bf95-f00d9b704975",
   "metadata": {},
   "source": [
    "Question no.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8454eb87-caf9-4420-a4d2-f1a0e0a3ef87",
   "metadata": {},
   "outputs": [],
   "source": [
    "1) text= [ \" php\", \" w3r\" python ]\n",
    "2) print ( \"original list of strings\" )\n",
    "3) print ( text )\n",
    "4) result = list ( filter ( lamb"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
